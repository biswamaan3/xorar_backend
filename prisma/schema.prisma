// prisma/schema.prisma

datasource db {
  provider = "postgresql" // You can change this depending on your database
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  password     String // Store the hashed password
  access_token String? // The access token for API authentication
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isAdmin      Boolean  @default(false) // Admin flag
}

model Category {
  id            Int           @id @default(autoincrement())
  name          String
  description   String?
  products      Product[]
  subcategories Subcategory[]
}

model Subcategory {
  id         Int       @id @default(autoincrement())
  name       String
  categoryId Int
  category   Category  @relation(fields: [categoryId], references: [id])
  products   Product[] @relation("ProductSubcategories")
}

model Product {
  id               Int               @id @default(autoincrement())
  title            String
  categoryId       Int
  category         Category          @relation(fields: [categoryId], references: [id])
  sizes            Size[]            @relation("ProductSizes")
  styleId          Int
  style            Style             @relation(fields: [styleId], references: [id])
  colors           Color[]           @relation("ProductColors") // Many-to-many relation
  subcategories    Subcategory[]     @relation("ProductSubcategories")
  description      String
  price            Float
  actual_price     Float
  discounted_price Float
  discount_percent Float
  thumbnail        String // URL of the thumbnail image
  images           String[] // Array of URLs for product images
  ratings          Rating[]          @relation("ProductRatings")
  reviews          Review[]          @relation("ProductReviews")
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  views            Int               @default(0)
  averageRating    Float?            @default(0)
  showOnHome       Boolean           @default(false)
  slug             String            @unique // Add slug field here
  OrderDetail      OrderDetail[]
  AddedToCart      AddedToCart[]
  AddedToWishlist  AddedToWishlist[]
}

model Color {
  id       Int       @id @default(autoincrement())
  name     String
  code     String // Hex code for the color
  products Product[] @relation("ProductColors") // Many-to-many relation
}

model Rating {
  id        Int      @id @default(autoincrement())
  value     Int // Rating value between 1-5
  productId Int
  product   Product  @relation(fields: [productId], references: [id], name: "ProductRatings")
  createdAt DateTime @default(now())
  Review    Review[]
}

model Review {
  id        Int      @id @default(autoincrement())
  user_name String
  content   String // Review content
  ratingId  Int
  rating    Rating   @relation(fields: [ratingId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id], name: "ProductReviews")
  createdAt DateTime @default(now())
}

model Size {
  id       Int       @id @default(autoincrement())
  name     String // Name of the size (e.g., "Small", "Medium", "Large")
  products Product[] @relation("ProductSizes") // Many-to-many relation
}

model Style {
  id       Int       @id @default(autoincrement())
  name     String // Name of the style (e.g., "Casual", "Formal")
  products Product[]
}

model Order {
  id             Int           @id @default(autoincrement())
  fullName       String // Full name of the buyer
  email          String // Email of the buyer
  address        String // Shipping address
  city           String // City of the buyer
  country        String // Country of the buyer
  state          String // State of the buyer
  paymentStatus  String // Payment status (e.g., "pending", "completed")
  deliveryStatus String // Delivery status (e.g., "pending", "shipped", "delivered")
  createdAt      DateTime      @default(now()) // Order creation date
  updatedAt      DateTime      @updatedAt // Order update date
  orderDetails   OrderDetail[] // Related order details
}

model OrderDetail {
  id          Int    @id @default(autoincrement())
  orderId     Int // Foreign key to Order
  productId   Int // Foreign key to Product
  productName String // Name of the product
  productUrl  String // URL of the product
  quantity    Int // Quantity of the product
  price       Float // Price of a single product
  totalPrice  Float // Total price for this product (price * quantity)

  order   Order   @relation(fields: [orderId], references: [id]) // Relationship to Order
  product Product @relation(fields: [productId], references: [id]) // Relationship to Product
}

model AddedToCart {
  id          Int       @id @default(autoincrement())
  user_string String
  productId   Int
  productName String
  quantity    Int
  country     String
  city        String
  dateAdded   DateTime  @default(now())
  dateRemoved DateTime?
  product     Product   @relation(fields: [productId], references: [id])
}

model AddedToWishlist {
  id          Int       @id @default(autoincrement())
  user_string String
  productId   Int
  productName String
  quantity    Int
  country     String
  city        String
  dateAdded   DateTime  @default(now())
  dateRemoved DateTime?
  product     Product   @relation(fields: [productId], references: [id])
}
